#ifndef __GNET_GROUPSETINFOARG_RPCDATA
#define __GNET_GROUPSETINFOARG_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class GroupSetInfoArg : public GNET::Rpc::Data
	{
	public:
		int userid;
		char zoneid;
		int roleid;
		int groupid;
		Octets info;

	public:
		GroupSetInfoArg (int l_userid = -1,char l_zoneid = -1,int l_roleid = -1
			,int l_groupid = -1,Octets l_info = Octets(0))
			: userid(l_userid),zoneid(l_zoneid),roleid(l_roleid)
			,groupid(l_groupid),info(l_info)
		{
		}

		GroupSetInfoArg(const GroupSetInfoArg &rhs)
			: userid(rhs.userid),zoneid(rhs.zoneid),roleid(rhs.roleid),
			groupid(rhs.groupid),info(rhs.info) { }

		Rpc::Data *Clone() const { return new GroupSetInfoArg(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const GroupSetInfoArg *r = dynamic_cast<const GroupSetInfoArg *>(&rhs);
			if (r && r != this)
			{
				userid = r->userid;
				zoneid = r->zoneid;
				roleid = r->roleid;
				groupid = r->groupid;
				info = r->info;
			}
			return *this;
		}

		GroupSetInfoArg& operator = (const GroupSetInfoArg &rhs)
		{
			const GroupSetInfoArg *r = &rhs;
			if (r && r != this)
			{
				userid = r->userid;
				zoneid = r->zoneid;
				roleid = r->roleid;
				groupid = r->groupid;
				info = r->info;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << userid;
			os << zoneid;
			os << roleid;
			os << groupid;
			os << info;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> userid;
			os >> zoneid;
			os >> roleid;
			os >> groupid;
			os >> info;
			return os;
		}

	};
};
#endif
