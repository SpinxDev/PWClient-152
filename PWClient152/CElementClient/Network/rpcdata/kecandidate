#ifndef __GNET_KECANDIDATE_RPCDATA
#define __GNET_KECANDIDATE_RPCDATA

#include "rpcdefs.h"


namespace GNET
{
	class KECandidate : public GNET::Rpc::Data
	{
	public:
		int roleid;
		int serial_num;
		int deposit;
		int votes;
		int reserved1;
		int reserved2;
		int reserved3;

	public:
		KECandidate (int l_roleid = 0,int l_serial_num = 0,int l_deposit = 0
			,int l_votes = 0,int l_reserved1 = 0,int l_reserved2 = 0
			,int l_reserved3 = 0)
			: roleid(l_roleid),serial_num(l_serial_num),deposit(l_deposit)
			,votes(l_votes),reserved1(l_reserved1),reserved2(l_reserved2)
			,reserved3(l_reserved3)
		{
		}

		KECandidate(const KECandidate &rhs)
			: roleid(rhs.roleid),serial_num(rhs.serial_num),deposit(rhs.deposit),
			votes(rhs.votes),reserved1(rhs.reserved1),reserved2(rhs.reserved2),
			reserved3(rhs.reserved3) { }

		Rpc::Data *Clone() const { return new KECandidate(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const KECandidate *r = dynamic_cast<const KECandidate *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				serial_num = r->serial_num;
				deposit = r->deposit;
				votes = r->votes;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		KECandidate& operator = (const KECandidate &rhs)
		{
			const KECandidate *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				serial_num = r->serial_num;
				deposit = r->deposit;
				votes = r->votes;
				reserved1 = r->reserved1;
				reserved2 = r->reserved2;
				reserved3 = r->reserved3;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << serial_num;
			os << deposit;
			os << votes;
			os << reserved1;
			os << reserved2;
			os << reserved3;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> serial_num;
			os >> deposit;
			os >> votes;
			os >> reserved1;
			os >> reserved2;
			os >> reserved3;
			return os;
		}

	};
	typedef GNET::RpcDataVector<KECandidate>	KECandidateVector;
};
#endif
