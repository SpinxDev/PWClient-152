	public:
		int retcode;
		int roleid;
		unsigned int localsid;
		int sellid;
		int seller;
		int point;
		int price;
		enum { PROTOCOL_TYPE = PROTOCOL_ANNOUNCESELLRESULT };
	public:
		AnnounceSellResult() { type = PROTOCOL_ANNOUNCESELLRESULT; }
		AnnounceSellResult(void*) : Protocol(PROTOCOL_ANNOUNCESELLRESULT) { }
		AnnounceSellResult (int l_retcode,int l_roleid,unsigned int l_localsid,
			int l_sellid = 0,int l_seller = 0,int l_point = 0,
			int l_price = 0)
			 : retcode(l_retcode),roleid(l_roleid),localsid(l_localsid),
			sellid(l_sellid),seller(l_seller),point(l_point),
			price(l_price)
		{
			type = PROTOCOL_ANNOUNCESELLRESULT;
		}

		AnnounceSellResult(const AnnounceSellResult &rhs)
			: Protocol(rhs),retcode(rhs.retcode),roleid(rhs.roleid),localsid(rhs.localsid),
			sellid(rhs.sellid),seller(rhs.seller),point(rhs.point),
			price(rhs.price) { }

		GNET::Protocol *Clone() const { return new AnnounceSellResult(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << roleid;
			os << localsid;
			os << sellid;
			os << seller;
			os << point;
			os << price;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> roleid;
			os >> localsid;
			os >> sellid;
			os >> seller;
			os >> point;
			os >> price;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 128; }
