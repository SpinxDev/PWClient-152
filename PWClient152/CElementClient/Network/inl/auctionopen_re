	public:
		unsigned short retcode;
		unsigned int auctionid;
		GAuctionItem info;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_AUCTIONOPEN_RE };
	public:
		AuctionOpen_Re() { type = PROTOCOL_AUCTIONOPEN_RE; }
		AuctionOpen_Re(void*) : Protocol(PROTOCOL_AUCTIONOPEN_RE) { }
		AuctionOpen_Re (unsigned short l_retcode,unsigned int l_auctionid = 0,GAuctionItem l_info = GAuctionItem(),
			unsigned int l_localsid = 0)
			 : retcode(l_retcode),auctionid(l_auctionid),info(l_info),
			localsid(l_localsid)
		{
			type = PROTOCOL_AUCTIONOPEN_RE;
		}

		AuctionOpen_Re(const AuctionOpen_Re &rhs)
			: Protocol(rhs),retcode(rhs.retcode),auctionid(rhs.auctionid),info(rhs.info),
			localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new AuctionOpen_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << retcode;
			os << auctionid;
			os << info;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> retcode;
			os >> auctionid;
			os >> info;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 128; }
