#ifndef __GNET_ITEMENTRY_RPCDATA
#define __GNET_ITEMENTRY_RPCDATA

#include "rpcdefs.h"

#include "pshopitem"

namespace GNET
{
	class ItemEntry : public GNET::Rpc::Data
	{
	public:
		int roleid;
		PShopItem item;

	public:
		ItemEntry (int l_roleid = 0,PShopItem l_item = PShopItem())
			: roleid(l_roleid),item(l_item)
		{
		}

		ItemEntry(const ItemEntry &rhs)
			: roleid(rhs.roleid),item(rhs.item) { }

		Rpc::Data *Clone() const { return new ItemEntry(*this); }

		Rpc::Data& operator = (const Rpc::Data &rhs)
		{
			const ItemEntry *r = dynamic_cast<const ItemEntry *>(&rhs);
			if (r && r != this)
			{
				roleid = r->roleid;
				item = r->item;
			}
			return *this;
		}

		ItemEntry& operator = (const ItemEntry &rhs)
		{
			const ItemEntry *r = &rhs;
			if (r && r != this)
			{
				roleid = r->roleid;
				item = r->item;
			}
			return *this;
		}

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << item;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> item;
			return os;
		}

	};
	typedef GNET::RpcDataVector<ItemEntry>	ItemEntryVector;
};
#endif
