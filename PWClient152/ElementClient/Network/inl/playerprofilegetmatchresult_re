	public:
		int roleid;
		std::vector<ProfileMatchResult> result;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_PLAYERPROFILEGETMATCHRESULT_RE };
	public:
		PlayerProfileGetMatchResult_Re() { type = PROTOCOL_PLAYERPROFILEGETMATCHRESULT_RE; }
		PlayerProfileGetMatchResult_Re(void*) : Protocol(PROTOCOL_PLAYERPROFILEGETMATCHRESULT_RE) { }
		PlayerProfileGetMatchResult_Re (int l_roleid,std::vector<ProfileMatchResult> l_result,unsigned int l_localsid)
			 : roleid(l_roleid),result(l_result),localsid(l_localsid)
		{
			type = PROTOCOL_PLAYERPROFILEGETMATCHRESULT_RE;
		}

		PlayerProfileGetMatchResult_Re(const PlayerProfileGetMatchResult_Re &rhs)
			: Protocol(rhs),roleid(rhs.roleid),result(rhs.result),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new PlayerProfileGetMatchResult_Re(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << result;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> result;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 1024; }
