	public:
		int roleid;
		std::vector<unsigned int> ids;
		unsigned int localsid;
		enum { PROTOCOL_TYPE = PROTOCOL_AUCTIONGETITEM };
	public:
		AuctionGetItem() { type = PROTOCOL_AUCTIONGETITEM; }
		AuctionGetItem(void*) : Protocol(PROTOCOL_AUCTIONGETITEM) { }
		AuctionGetItem (int l_roleid,const std::vector<unsigned int>& l_ids = std::vector<unsigned int>(),unsigned int l_localsid = 0)
			 : roleid(l_roleid),ids(l_ids),localsid(l_localsid)
		{
			type = PROTOCOL_AUCTIONGETITEM;
		}

		AuctionGetItem(const AuctionGetItem &rhs)
			: Protocol(rhs),roleid(rhs.roleid),ids(rhs.ids),localsid(rhs.localsid) { }

		GNET::Protocol *Clone() const { return new AuctionGetItem(*this); }

		OctetsStream& marshal(OctetsStream & os) const
		{
			os << roleid;
			os << ids;
			os << localsid;
			return os;
		}

		const OctetsStream& unmarshal(const OctetsStream &os)
		{
			os >> roleid;
			os >> ids;
			os >> localsid;
			return os;
		}

		int PriorPolicy( ) const { return 1; }

		bool SizePolicy(size_t size) const { return size <= 64; }
