; DESCRIPTION:
; Vertex shader used to render terrain for water refract with light map
; this shader does below works:
; # vertex transform

vs.1.1

;------------------------------------------------------------------------------
; v0 	  = position in world space
; v1	  = normal
; v2~v5	  = texture coordinates 0, 1, 2 and 3
;------------------------------------------------------------------------------

dcl_position v0
dcl_normal v1
dcl_texcoord0 v2
dcl_texcoord1 v3
dcl_texcoord2 v4
dcl_texcoord3 v5

;------------------------------------------------------------------------------
; Constants specified by the app;
; c0      = (1.0, WaterHeight, fogDensity, fogOffset)
; c1-c4	  = view matrix * projection matrix
; c5	  = tex coord index for oT0
; c6	  = tex coord index for oT1
; c7	  = tex coord index for oT2
; c8-c11  = texture layer 0 transform matrix
; c12-c15 = texture layer 1 transform matrix
; c16-c19 = texture layer 2 transform matrix
; c20     = camera position
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; oPos	  = Output position
; oD0	  = Diffuse
; oFog    = fog value consider water depth
;------------------------------------------------------------------------------

sub r1.y, c0.y, v0.y
slt r1.x, c0.y, v0.y

; Transform position on the water surface from world space to cuboid space and output it
mov r0, v0
mad r0.y, r1.x, r1.y, v0.y
m4x4 oPos, r0, c1

; update clamped height diff
sub r1.y, c0.y, r0.y

; calculate water darkness coefficients according to water depth
mul r1.z, r1.y, c0.z		// density * distance
add r1.z, r1.z, r1.z
exp r1.z, r1.z
rcp oD0, r1.z

; calculate fog
sub r0, c20, v0
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul r0.xyz, r0, r0.w
rcp r0.y, r0.y
mul r1.z, r1.y, r0.y
mul r1.z, r1.z, c0.z		// density * distance
;mul r1.x, r1.z, r1.z		// power of 2
;mul r1.z, r1.x, r1.z		// power of 3
exp r1.z, r1.z
rcp r1.z, r1.z
add oFog, r1.z, c0.w

; Calculate texture coordinates
mul r0.xy, v2, c5.x
mad r0.xy, v3, c5.y, r0
mad r0.xy, v4, c5.z, r0
m3x2 oT0, r0, c8

mul r0.xy, v2, c6.x
mad r0.xy, v3, c6.y, r0
mad r0.xy, v4, c6.z, r0
m3x2 oT1, r0, c12

mul r0.xy, v2, c7.x
mad r0.xy, v3, c7.y, r0
mad r0.xy, v4, c7.z, r0
m3x2 oT2, r0, c16

// output mask layer texture coord directly
mov oT3, v5
mov oT4, v5
mov oT5, v5
