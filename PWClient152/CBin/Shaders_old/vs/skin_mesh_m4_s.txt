; DESCRIPTION:
; Vertex shader used to render A3DSkinMesh. this shader does below works:
; # vertex blending (4 blending matrix) and transform
; # compute light = env_ambient + dir_light(ambient & diffuse & specular)
; # output texture coordinates

; CREATED BY: duyuxin, 2003/10/28
; Copyright (c) 2003 Archosaur Studio, All Rights Reserved.

vs.1.1

;------------------------------------------------------------------------------
; v0 = position
; v1 = blend weights
; v2 = blend indices
; v3 = normal
; v7 = texture coordinates
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; Constants specified by the app;
;
; >= c14  = palette of world matrices (from model space to world space)
; c13	  = point_light's attenuation
; c12	  = material ambient * point_light.ambient
; c11	  = material.diffuse * point_light.diffuse
; c10	  = point_light's position in world space
; c9	  = material.specular * dir_light.specular
; c8	  = material.diffuse * dir_light.diffuse
; c7	  = ambient color + emmisive color
; c6	  = eye's direction in camera space
; c2-c5   = projection matrix (from camera space to cuboid space)
; c1	  = dir_light's direction in camera space, c1.w is 0.5f
; c0	  = {1, power, 0.0, 765.01};
;------------------------------------------------------------------------------

;------------------------------------------------------------------------------
; oPos	  = Output position
; oD0	  = Diffuse
; oD1	  = Specular
; oT0	  = texture coordinates
;------------------------------------------------------------------------------

; ============ Transform position and normal from model space to world space ==========

; Compensate for lack of UBYTE4 on Geforce3
mul r1, v2.zyxw, c0.wwww
; mul r1,v2, c0.wwww

; first compute the last blending weight
dp3 r0.w, v1.xyz, c0.xxx
add r0.w, -r0.w, c0.x

; Set 1
mov a0.x, r1.x
m4x3 r4, v0, c[a0.x + 14]
m3x3 r5, v3, c[a0.x + 14] 

; blend them
mul r4, r4, v1.xxxx
mul r5, r5, v1.xxxx

; Set 2
mov a0.x, r1.y
m4x3 r2, v0, c[a0.x + 14]
m3x3 r3, v3, c[a0.x + 14]

; add them in
mad r4, r2, v1.yyyy, r4
mad r5, r3, v1.yyyy, r5
		
; Set 3
mov a0.x, r1.z
m4x3 r2, v0, c[a0.x + 14]
m3x3 r3, v3, c[a0.x + 14]

; add them in
mad r4, r2, v1.zzzz, r4
mad r5, r3, v1.zzzz, r5

; Set 4
mov a0.x, r1.w
m4x3 r2, v0, c[a0.x + 14]
m3x3 r3, v3, c[a0.x + 14]

; add them in
mad r4, r2, r0.wwww, r4
mad r5, r3, r0.wwww, r5

; Transfrom position from camera space to cuboid space and output it
mov r4.w, c0.x
m4x4 r1, r4, c2
mov oPos, r1
mov oFog, c0.x

; ============ Calculate directional light's diffuse and specular ============

; normalize normal
dp3 r5.w, r5, r5
rsq r5.w, r5.w
mul r5, r5, r5.w

; output texture layer 1 to use the camera space normal 
mad oT1.x, r5.x, c1.w, c1.w
mad oT1.y, r5.y, -c1.w, c1.w

mov r4, -c1
dp3 r1.x, r5, r4     	; normal dot light (N * L)
add r2, -c6, r4		; normalized half vector H = L + V

; renormalize H
dp3 r2.w, r2, r2
rsq r2.w, r2.w
mul r2, r2, r2.w

dp3 r1.y, r5, r2	; N dot H

; compute specular and clamp values (lit)
; r1.x - N dot L
; r1.y - N dot H
; r1.w - specular power n
mov r1.w, c0.y
lit r1, r1

mul r0.rgb, r1.y, c8.rgb  ; Multiply with diffuse, don't effect alpha value
mov r0.a, c8.a
add r0, r0, c7        	; Add in ambient
min oD0, r0, c0.x     	; output diffuse, clamp if > 1

mul r4, r1.z, c9    	; Multiply with specular
mov r4.w, c0.x			; Set fog factor to 1
min oD1, r4, c0.x     	; output specular, clamp if > 1

; Copy texture coordinate
mov oT0, v7

